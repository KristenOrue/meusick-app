# This file is the main config file for your service.
# You can always add more config options for more control.
# We've included some commented out config examples here.

service: meusick-api-node
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  # region: us-west-2
  # Policies:
  #   - AWSLambdaExecute
  #   - Version: '2012-10-17' 
  #     Statement:
  #       - Effect: Allow
  #         Action:
  #           - s3:GetObject
  #           - s3:GetObjectACL
  #         Resource: 'arn:aws:s3:::meusick-bucket'
  # iamManagedPolicies: 
  #   - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
  # iamRoleStatements:
  #   - Effect: 'Allow'
  #     Action:
  #       - 's3:ListBucket'
  #     Resource:
  #       Fn::Join:
  #         - ''
  #         - - 'arn:aws:s3:::meusick-bucket'
  #           - Ref: ServerlessDeploymentBucket
  #   - Effect: 'Allow'
  #     Action:
  #       - 's3:PutObject'
  #     Resource:
  #       Fn::Join:
  #         - ''
  #         - - 'arn:aws:s3:::meusick-bucket'
  #           - Ref: ServerlessDeploymentBucket
  #           - '/*'
  #   - Effect: 'Allow'
  #     Action:
  #       - 's3:GetObject'
  #     Resource:
  #       Fn::Join:
  #         - ''
  #         - - 'arn:aws:s3:::meusick-bucket'
  #           - Ref: ServerlessDeploymentBucket
  #           - '/*'
  #   - Effect: 'Allow'
  #     Action:
  #       - 'lambda:InvokeFunction'
  #     Resource: "*"

plugins:
  - serverless-offline
  - serverless-express
  - serverless-wsgi
  - serverless-iam-roles-per-function

functions:
  hello:
    handler: handler.api
    events:
      - httpApi:
          path: /ex
          method: get

  s3file:
    handler: handlerS3.hello
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 's3:ListBucket'
        Resource: "arn:aws:s3:::meusick-bucket"

      # - Effect: 'Allow'
      #   Action:
      #     - 's3:GetObject'
      #   Resource: "arn:aws:s3:::meusick-bucket"

      - Effect: 'Allow'
        Action:
          - 's3:ListObjects'
        Resource: "arn:aws:s3:::meusick-bucket"

    events:
      - httpApi:
          path: /s3file
          method: get
  heller:
    runtime: python3.8
    handler: handler_py.heller
    events:
      - httpApi:
          path: /heller
          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
