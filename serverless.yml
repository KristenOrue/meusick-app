service: meusick-api-node
frameworkVersion: '2'

custom:
  tableName: 'music'
  dynamodb:
    start:
      migrate: true

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - s3:ListBucket
        - s3:GetObject
        - s3:ListObjects
        - sqs:*
             
      Resource:
        - { "Fn::GetAtt": ["MusicDynamoDBTable", "Arn" ] }
        - "arn:aws:sqs:us-east-1:589772831734:MyQueue"
  environment:
    MUSIC_TABLE: ${self:custom.tableName}

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-express
  - serverless-wsgi
  - serverless-iam-roles-per-function

functions:
#Add a lambda function to our servlerless.yaml that will handle the auth for us 
  # auth:
  #   handler: auth.handler

  sqs_function:
    handler: handlersqs.handler
    reservedConcurrency: 10 #Concurrency control
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - MyQueue
              - Arn

  # hello:
  #   handler: handler.api
  #   events:
  #     - http:
  #         method: ANY
  #         path: /{proxy+}
  #         cors: true
  #         authorizer:
  #           name: auth
  #           type: request
  #           identitySource: method.request.header.authorization 

#Assignment AWSDDB-Part 2:
  app:
    handler: index.handler
    events:
      - http: ANY /
      - http: 'ANY /{proxy+}'

  postPlay:
    handler: index.handler
    events:
      - http: 'POST /play'

  getGenres:
    handler: index.handler
    events:
      - http: 'GET /genres'

  getArtistsByGenre:
    handler: index.handler
    events:
      - http: 'GET /artists/for/genre/{proxy+}'

  getAlbumsByArtist:
    handler: index.handler
    events:
      - http: 'GET /albums/for/artist/{proxy+}'

  getSongsByAlbum:
    handler: index.handler
    events:
      - http: 'GET /songs/for/album/{proxy+}'

  getSong:
    handler: index.handler
    events: 
      - http: 'GET /song/{proxy+}'

#Created for AW S3 & Servless:
  s3file:
    handler: handlerS3.hello
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 's3:ListBucket'
        Resource: "arn:aws:s3:::meusick-bucket"

      - Effect: 'Allow'
        Action:
          - 's3:GetObject'
        Resource: "arn:aws:s3:::meusick-bucket"

      - Effect: 'Allow'
        Action:
          - 's3:ListObjects'
        Resource: "arn:aws:s3:::meusick-bucket"
    events:
      - httpApi:
          path: /s3file
          method: get



resources:
  Resources:
    MyQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "MyQueue"

    MusicDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "pk"
            AttributeType: "S"
          -
            AttributeName: "sk"
            AttributeType: "S"

        KeySchema:
          -
            AttributeName: "pk"
            KeyType: HASH
          -
            AttributeName: "sk"
            KeyType: RANGE
          

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

        TableName: ${self:custom.tableName} 

        GlobalSecondaryIndexes:
        -
          IndexName: "by_sk"
          KeySchema:
          
            - AttributeName: "sk"
              KeyType: "HASH"
          
            - AttributeName: "pk" #Another item as your range
              KeyType: "RANGE"

          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

          Projection:
            ProjectionType: ALL


        # GlobalSecondaryIndexes:
        # - 
        #   IndexName: "by_sk"
        #   KeySchema:

        #     - AttributeName: "sk"
        #       KeyType: "HASH"

        #     - AttributeName: "pk" 
        #       KeyType: "RANGE"
          
        #   Projection:
        #     ProjectionType: ALL
          
        #   ProvisionedThroughput:
        #     ReadCapacityUnits: 1
        #     WriteCapacityUnits: 1
          
        # -
        #   IndexName: "by_song"
        #   KeySchema:

        #     - AttributeName: "song"
        #       KeyType: "HASH"

        #     - AttributeName: "album" 
        #       KeyType: "RANGE"
          
        #   Projection:
        #     ProjectionType: ALL
          
        #   ProvisionedThroughput:
        #     ReadCapacityUnits: 1
        #     WriteCapacityUnits: 1
          
  #Only have your keys be a String/Boolean be a hash key

  # genre:
  #   handler: handlerGenre.api
  #   events:
  #     - httpApi:
  #         path: /genre
  #         method: get
  # song:
  #   handler: handlerSong.api
  #   events:
  #     - httpApi:
  #         path: /
  #         method: get


  # s3file:
  #   handler: handlerS3.hello
  #   iamRoleStatements:
  #     - Effect: 'Allow'
  #       Action:
  #         - 's3:ListBucket'
  #       Resource: "arn:aws:s3:::meusick-bucket"

  #     - Effect: 'Allow'
  #       Action:
  #         - 's3:GetObject'
  #       Resource: "arn:aws:s3:::meusick-bucket"

  #     - Effect: 'Allow'
  #       Action:
  #         - 's3:ListObjects'
  #       Resource: "arn:aws:s3:::meusick-bucket"
  #   events:
  #     - httpApi:
  #         path: /s3file
  #         method: get
  # heller:
  #   runtime: python3.8
  #   handler: handler_py.heller
  #   events:
  #     - httpApi:
  #         path: /heller
  #         method: get
