service: meusick-api
frameworkVersion: '2'

custom:
  tableName: 'music-table'
  dynamodb:
    start:
      migrate: true

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - s3:ListBucket
        - s3:GetObject
        - s3:ListObjects
        - sqs:*
             
      Resource:
        - { "Fn::GetAtt": ["MusicDynamoDBTable", "Arn" ] }
  environment:
    MUSIC_TABLE: ${self:custom.tableName}

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-express
  - serverless-wsgi
  - serverless-iam-roles-per-function

functions:
  auth:
    handler: auth.handler

  sqs_function:
    handler: handlersqs.handler
    reservedConcurrency: 10 #Concurrency control
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - SQSqueue
              - Arn
  app:
    handler: index.handler
    events:
      # - http: ANY /{proxy+}
      - http: ANY /
      - http:
          method: ANY
          path: /{proxy+}
          cors: true
          authorizer:
            name: auth
            type: request
            identitySource: method.request.header.authorization

  post_play:
    handler: index.handler
    events:
      # - http: 'POST /play'
      - http:
          path: /play
          method: post
          cors:
            origin:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Request-Headers
              - Access-Control-Request-Method
            allowCredentials: true

  get_genres:
    handler: index.handler
    events:
      # - http: 'GET /genres'
      - http:
          method: GET
          path: /genres
          cors: true
          authorizer:
            name: auth
            type: request
            identitySource: method.request.header.authorization

  get_artists_by_genre:
    handler: index.handler
    events:
      # - http: 'GET /artists/for/genre/{proxy+}'
      - http:
          path: /artists/for/genre/{proxy+}
          method: GET
          cors: true
          authorizer:
            name: auth
            type: request
            identitySource: method.request.header.authorization

  get_albums_by_artist:
    handler: index.handler
    events:
      # - http: 'GET /albums/for/artist/{proxy+}'
      - http:
          path: /albums/for/artist/{proxy+}
          method: GET
          cors: true
          authorizer:
            name: auth
            type: request
            identitySource: method.request.header.authorization

  get_songs_by_album:
    handler: index.handler
    events:
      # - http: 'GET /songs/for/album/{proxy+}'
      - http:
          path: /songs/for/album/{proxy+}
          method: GET
          cors: true
          authorizer:
            name: auth
            type: request
            identitySource: method.request.header.authorization

  get_song:
    handler: index.handler
    events: 
      # - http: 'GET /song/{proxy+}'
      - http:
          path: /song/{proxy+}
          method: GET
          cors: true
          authorizer:
            name: auth
            type: request
            identitySource: method.request.header.authorization

#Created for AW S3 & Servless:
  s3:
    handler: handlerS3.hello
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 's3:ListBucket'
        Resource: "arn:aws:s3:::meusick-bucket"

      - Effect: 'Allow'
        Action:
          - 's3:GetObject'
        Resource: "arn:aws:s3:::meusick-bucket"

      - Effect: 'Allow'
        Action:
          - 's3:ListObjects'
        Resource: "arn:aws:s3:::meusick-bucket"
    events:
      - httpApi:
          path: /s3file
          method: get



resources:
  Resources:
    SQSqueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "SQSqueue"

    MusicDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "pk"
            AttributeType: "S"
          -
            AttributeName: "sk"
            AttributeType: "S"

        KeySchema:
          -
            AttributeName: "pk"
            KeyType: HASH
          -
            AttributeName: "sk"
            KeyType: RANGE
          

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

        TableName: ${self:custom.tableName} 

        GlobalSecondaryIndexes:
        -
          IndexName: "by_sk"
          KeySchema:
          
            - AttributeName: "sk"
              KeyType: "HASH"
          
            - AttributeName: "pk" #Another item as your range
              KeyType: "RANGE"

          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

          Projection:
            ProjectionType: ALL


        # GlobalSecondaryIndexes:
        # - 
        #   IndexName: "by_sk"
        #   KeySchema:

        #     - AttributeName: "sk"
        #       KeyType: "HASH"

        #     - AttributeName: "pk" 
        #       KeyType: "RANGE"
          
        #   Projection:
        #     ProjectionType: ALL
          
        #   ProvisionedThroughput:
        #     ReadCapacityUnits: 1
        #     WriteCapacityUnits: 1
          
        # -
        #   IndexName: "by_song"
        #   KeySchema:

        #     - AttributeName: "song"
        #       KeyType: "HASH"

        #     - AttributeName: "album" 
        #       KeyType: "RANGE"
          
        #   Projection:
        #     ProjectionType: ALL
          
        #   ProvisionedThroughput:
        #     ReadCapacityUnits: 1
        #     WriteCapacityUnits: 1
          
  #Only have your keys be a String/Boolean be a hash key

  # genre:
  #   handler: handlerGenre.api
  #   events:
  #     - httpApi:
  #         path: /genre
  #         method: get
  # song:
  #   handler: handlerSong.api
  #   events:
  #     - httpApi:
  #         path: /
  #         method: get


  # s3file:
  #   handler: handlerS3.hello
  #   iamRoleStatements:
  #     - Effect: 'Allow'
  #       Action:
  #         - 's3:ListBucket'
  #       Resource: "arn:aws:s3:::meusick-bucket"

  #     - Effect: 'Allow'
  #       Action:
  #         - 's3:GetObject'
  #       Resource: "arn:aws:s3:::meusick-bucket"

  #     - Effect: 'Allow'
  #       Action:
  #         - 's3:ListObjects'
  #       Resource: "arn:aws:s3:::meusick-bucket"
  #   events:
  #     - httpApi:
  #         path: /s3file
  #         method: get
  # heller:
  #   runtime: python3.8
  #   handler: handler_py.heller
  #   events:
  #     - httpApi:
  #         path: /heller
  #         method: get
